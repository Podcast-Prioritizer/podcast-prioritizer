{"version":3,"sources":["styles/assets/logo.png","Header.js","MapQuestSearch.js","Podcast.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","activeClassName","to","Component","MapQuestSearch","getMapInfo","event","preventDefault","Axios","all","makeAxiosCallBike","refs","userStart","value","userDestination","makeAxiosCallWalk","then","responseArray","returnLocationInfo","data","route","locations","locationObject","startAddress","street","startCity","adminArea5","endAddress","endCity","formattedBikeSeconds","formattedTime","split","reduce","acc","time","formattedPedestrianSeconds","props","setLocationsProp","setBikeTimeProp","setWalkTimeProp","catch","error","Swal","fire","title","text","icon","timer","request","stateProp","bikingTime","stateProps","walkingTime","url","method","dataType","params","key","apiKey","from","routeType","autoCompleteDestination","q","collection","results","slice","map","suggestion","console","log","displayString","onSubmit","this","htmlFor","type","placeholder","id","ref","onKeyDown","Podcast","handleSubmit","axios","headers","dataResponse","state","userInput","setState","podcastList","length","button","handleChange","target","getRecentEpisodes","e","podcastID","newEpisodes","episodes","forEach","element","index","push","episodeList","closeEpisodeList","totalTime","seconds","hours","Math","floor","minutes","round","showMore","document","getElementById","classList","toggle","innerHTML","selectEpisode","selectedEpisodeId","podcastLength","episode","setPodcastTime","selectedEpisodeProp","showDetails","remove","setAttribute","closeDialog","add","onChange","onClick","class","episodeId","thumbnail","dangerouslySetInnerHTML","__html","description","audio_length_sec","podcast","title_original","description_original","Footer","App","setBikeTime","returnedBikingTime","setWalkTime","returnedWalkingTime","setLocations","startAndEndLocations","returnedPodcastTime","podcastTime","selectedEpisode","podcastEpisode","mapQuestApiKey","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e9eade8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b2aa362.png\";","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport logo from './styles/assets/logo.png'\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n          <div className=\"Header\">\r\n\r\n            <div className=\"Header__displayArea\">\r\n              \r\n              <div className=\"Header__linksAndLogo\">\r\n                <img className=\"Header__logo\" src={ logo } alt=\"Paths and Podcasts Logo\"/>\r\n  \r\n                <nav className=\"Header__nav\">\r\n                  <NavLink className=\"Header__navLink\" activeClassName=\"active\" to=\"/home\">\r\n                    Home\r\n                  </NavLink>\r\n                </nav>\r\n              </div>\r\n\r\n              <div className=\"Header__headerContent\">\r\n\r\n                <h1 className=\"Header__mainHeader\">Paths and Podcasts</h1>\r\n\r\n                <p className=\"Header__tagline\">\r\n                  Who said your commute has to be boring?\r\n                </p>\r\n\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\n// EXPORT ========================================\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass MapQuestSearch extends Component {\r\n    // On form submit, take both user inputs and make axios call to retrieve travel time (walking and biking)\r\n    getMapInfo = event => {\r\n        event.preventDefault();       \r\n\r\n      Axios.all(\r\n        [\r\n          this.makeAxiosCallBike(\r\n            this.refs.userStart.value,\r\n            this.refs.userDestination.value\r\n          ),\r\n          this.makeAxiosCallWalk(\r\n            this.refs.userStart.value,\r\n            this.refs.userDestination.value\r\n          )\r\n        ]\r\n        // When axios data is returned, set locations and formatted time to state\r\n      )\r\n        .then(responseArray => {\r\n          const returnLocationInfo = responseArray[0].data.route.locations;\r\n\r\n          let locationObject = {\r\n            startAddress: returnLocationInfo[0].street,\r\n            startCity: returnLocationInfo[0].adminArea5,\r\n            endAddress: returnLocationInfo[1].street,\r\n            endCity: returnLocationInfo[1].adminArea5\r\n          };\r\n          \r\n          let formattedBikeSeconds = responseArray[0].data.route.formattedTime.split(':').reduce((acc, time) => (60 * acc) + +time);\r\n          \r\n          let formattedPedestrianSeconds = responseArray[1].data.route.formattedTime.split(':').reduce((acc, time) => (60 * acc) + +time);\r\n\r\n          this.props.setLocationsProp(locationObject);\r\n          this.props.setBikeTimeProp(formattedBikeSeconds);\r\n          this.props.setWalkTimeProp(formattedPedestrianSeconds);\r\n        })\r\n        .catch(error => {\r\n          if (error) {\r\n            Swal.fire({\r\n              title: \"Uh-oh!\",\r\n              text:\r\n                \"Looks like you're not too sure where you're going.  Make sure you have included a start and destination address\",\r\n              icon: \"error\",\r\n              timer: 4000\r\n            });\r\n          } else if (error.request) {\r\n              Swal.fire({\r\n              title: \"Uh-oh!\",\r\n              text:\r\n                \"Looks like you're not too sure where you're going.  Make sure you have included a start and destination address\",\r\n              icon: \"error\",\r\n              timer: 4000\r\n            });\r\n          } else if (\r\n            this.props.stateProp.bikingTime === \"00:00:00\" || \r\n            this.props.stateProps.walkingTime === \"\") {\r\n              Swal.fire({\r\n                title: \"Uh-oh!\",\r\n                text:\r\n                  \"Looks like you're not too sure where you're going.  Make sure you have included a start and destination address\",\r\n                  icon: \"error\",\r\n                  timer: 4000\r\n              });\r\n            }\r\n        });\r\n    \r\n    \r\n    \r\n  };\r\n\r\n  makeAxiosCallBike = (userStart, userDestination) => {\r\n    return Axios({\r\n      url: \"https://www.mapquestapi.com/directions/v2/route\",\r\n      method: \"GET\",\r\n      dataType: \"json\",\r\n      params: {\r\n        key: this.props.apiKey,\r\n        from: userStart,\r\n        to: userDestination,\r\n        routeType: \"bicycle\",\r\n      },\r\n    });\r\n  };\r\n\r\n    makeAxiosCallWalk = (userStart, userDestination) => {\r\n    return Axios({\r\n      url: \"https://www.mapquestapi.com/directions/v2/route\",\r\n      method: \"GET\",\r\n      dataType: \"json\",\r\n      params: {\r\n        key: this.props.apiKey,\r\n        from: userStart,\r\n        to: userDestination,\r\n        routeType: \"pedestrian\",\r\n      },\r\n    });\r\n  };\r\n\r\n  // Autocomplete axios call on input keydown (US only 😫)\r\n  autoCompleteDestination = () => {\r\n    return Axios({\r\n      url: \"http://www.mapquestapi.com/search/v3/prediction\",\r\n      method: \"GET\",\r\n      dataType: \"json\",\r\n      params: {\r\n        key: this.props.apiKey,\r\n        q: this.refs.userDestination.value,\r\n        collection: \"address\",\r\n      },\r\n    }).then((data) => {\r\n      let slicedSuggestionArray = data.data.results.slice(0, 5);\r\n\r\n      slicedSuggestionArray.map((suggestion) => {\r\n        console.log(suggestion.displayString);\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"MapQuest__searchArea\">\r\n        <div className=\"wrapper\">\r\n\r\n          <div className=\"MapQuest__introContent\">\r\n            <h2>Hit the road</h2>\r\n            <p>Find the best way to reach your destination.  Enter your start location and your desired destination.</p>\r\n          </div>\r\n\r\n          <form className=\"MapQuest__form\" onSubmit={this.getMapInfo}>\r\n            <label htmlFor=\"userStart\" className=\"visuallyHidden\">\r\n              Enter Your Location\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Your Location\"\r\n              id=\"userStart\"\r\n              ref=\"userStart\"\r\n            />\r\n            <label htmlFor=\"userDestination\" className=\"visuallyHidden\">\r\n              Enter Your Destination\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter Your Destination\"\r\n              id=\"userDestination\"\r\n              ref=\"userDestination\"\r\n              onKeyDown={this.autoCompleteDestination}\r\n            />\r\n            <button className=\"MapQuest__submitBtn\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default MapQuestSearch;","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport './App.css';\r\n// SWEET ALERTS\r\nimport Swal from \"sweetalert2\";\r\n\r\n\r\n\r\nclass Podcast extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            podcastList: [], \r\n            userInput: \"\",\r\n            episodeList: [],\r\n        };\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        \r\n        axios({\r\n            url:`https://listen-api.listennotes.com/api/v2/search`,\r\n            method: `GET`,\r\n            headers:{'X-ListenAPI-Key':'f1e31e292af446549bfbfebe744dd3ce'},\r\n            dataResponse: `jsonp`,\r\n            params:{\r\n                q: this.state.userInput,\r\n                type: \"podcast\"\r\n            }\r\n        }).then((data)=>{\r\n            this.setState({\r\n              podcastList: data.data.results\r\n            })  \r\n            \r\n            if (this.state.podcastList.length === 0) {\r\n              Swal.fire({\r\n                title: \"Uh-oh!\",\r\n                text:\r\n                  \"Looks like we don't have any podcasts that match your criteria (you must be super picky!).  Please try again\",\r\n                icon: \"error\",\r\n                timer: 4000,\r\n                button: false\r\n              });\r\n            }\r\n        })  \r\n    }  \r\n\r\n    handleChange = (event) =>{\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n\r\n    // Queries the Listen Podcast API for the 10 most recent podcast episodes\r\n    getRecentEpisodes = (e) => {\r\n        const podcastID = e.target.id;\r\n\r\n        axios({\r\n            url: `https://listen-api.listennotes.com/api/v2/podcasts/${podcastID}`,\r\n            method: `GET`,\r\n            headers: { \"X-ListenAPI-Key\": \"f1e31e292af446549bfbfebe744dd3ce\" },\r\n            dataResponse: `json`\r\n        }).then(data => {\r\n            const newEpisodes = [];\r\n\r\n            data.data.episodes.forEach((element, index) => {\r\n                if (index < 10) {\r\n                newEpisodes.push(element);\r\n\r\n                this.setState({\r\n                    episodeList: newEpisodes,\r\n                });\r\n\r\n                } ;\r\n            });\r\n        });\r\n    }\r\n\r\n    closeEpisodeList = () => {\r\n        this.setState({\r\n            episodeList: \"\"\r\n        });\r\n    };\r\n\r\n    totalTime = (seconds)=>{\r\n        const hours = Math.floor(seconds/3600);\r\n        const minutes = Math.round((seconds %= 3600)/60);\r\n        if(hours > 0){\r\n            return `${hours} h ${minutes} min`\r\n        }else{\r\n            return `${minutes} min`\r\n        }\r\n    };\r\n\r\n    showMore = (e, index) =>{\r\n        document.getElementById(`PodcastCard__description--${index}`).classList.toggle(\"PodcastCard__description--snippet\")\r\n\r\n        if(e.target.innerHTML === \"... Show more\"){\r\n            e.target.innerHTML = \"... Show less\"\r\n        }else{\r\n            e.target.innerHTML = \"... Show more\"\r\n        };\r\n    };\r\n\r\n    selectEpisode = (selectedEpisodeId, index) => {\r\n        let podcastLength = this.state.episodeList[index][\"audio_length_sec\"];\r\n\r\n        this.state.episodeList.map((episode) => {\r\n            if (episode.id === selectedEpisodeId) {\r\n                this.props.setPodcastTime(podcastLength);\r\n                this.props.selectedEpisodeProp(this.state.episodeList[index]);\r\n            };\r\n        });\r\n    };\r\n\r\n    //episode details\r\n    showDetails = (e, index) => {\r\n        document.getElementById(`EpisodeCard__description--${index}`).classList.remove(\"visuallyHidden\")\r\n        document.getElementById(`EpisodeCard__description--${index}`).setAttribute(\"open\", true)\r\n    }\r\n\r\n    closeDialog= (e, index) => {\r\n        document.getElementById(`EpisodeCard__description--${index}`).classList.add(\"visuallyHidden\")\r\n        document.getElementById(`EpisodeCard__description--${index}`).setAttribute(\"open\", false)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <section className=\"Podcast\">\r\n            <div className=\"wrapper\">\r\n                <div className=\"Podcast__introContent\">\r\n                <h2>Pick your Podcast</h2>\r\n                <p>\r\n                    Find an episode of a podcast to keep you entertained on your commute.\r\n                </p>\r\n            </div>\r\n\r\n            <form onSubmit={this.handleSubmit} className=\"PodcastSearch\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search podcast\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.userInput}\r\n                    className=\"PodcastSearch__textInput\"\r\n                />\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    onSubmit={this.handleSubmit}\r\n                    className=\"PodcastSearch__submitButton\"\r\n                >\r\n                    Submit\r\n                </button>\r\n            </form>\r\n\r\n            <section className=\"PodcastResults\">\r\n                {this.state.episodeList.length ? (\r\n                <button\r\n                    className=\"PodcastResults__button--back\"\r\n                    onClick={this.closeEpisodeList}\r\n                >\r\n                    <span className=\"visuallyHidden\">\r\n                        Click here to go back\r\n                    </span>\r\n                    <i class=\"fas fa-arrow-left\" title=\"Go back\"></i>\r\n                </button>\r\n                ) : null}\r\n\r\n                <ul className=\"PodcastResults__list\">\r\n                    {!this.state.episodeList.length\r\n                        ? this.state.podcastList.map((podcast, index) => {\r\n                            return (\r\n                            <li className=\"PodcastResults__item\" key={podcast.id}>\r\n                                <img\r\n                                    src={podcast.thumbnail}\r\n                                    alt={podcast.title_original}\r\n                                    className=\"PodcastCard__image\"\r\n                                    />\r\n                                <div>\r\n                                    <h2 className=\"PodcastCard__title\">\r\n                                        {podcast.title_original.split(\"|\")[0]}\r\n                                    </h2>\r\n                                    <p\r\n                                    className=\"PodcastCard__description PodcastCard__description--snippet\"\r\n                                    id={`PodcastCard__description--${index}`}\r\n                                    >\r\n                                    {podcast.description_original}\r\n                                    </p>\r\n        \r\n                                    {\r\n                                    (podcast.description_original.length > 300)\r\n                                    ?\r\n                                    <button \r\n                                        className=\"PodcastCard__button--showMore\"\r\n                                        onClick={(e)=>{this.showMore(e, index)}}>\r\n                                        ... Show more\r\n                                    </button>\r\n                                    : null\r\n                                    }\r\n                                    <br/>\r\n\r\n                                    <button\r\n                                    id={podcast.id}\r\n                                    onClick={this.getRecentEpisodes}\r\n                                    className=\"PodcastCard__button\"\r\n                                    >\r\n                                    Episodes\r\n                                    </button>\r\n                                </div>\r\n                            </li>\r\n                            );\r\n                        })\r\n                    : this.state.episodeList.map((episode, index) => {\r\n                        return (\r\n                        <li key={episode.id} \r\n                        episodeId={episode.id}\r\n                        className=\"EpisodeResults__item\"\r\n                        ref=\"singleEpisode\"\r\n                        >\r\n                            <img\r\n                                src={episode.thumbnail}\r\n                                alt={episode.title}\r\n                                className=\"PodcastCard__image\"\r\n                            />\r\n                            <div>\r\n                                <h2 className=\"PodcastCard__title\">\r\n                                    {episode.title}\r\n                                </h2>\r\n                                <dialog className=\"visuallyHidden\" id={`EpisodeCard__description--${index}`}>\r\n                                    <div className=\"EpisodeCard__titleBar\">\r\n                                        <p>{episode.title}</p>\r\n                                        <button className=\"EpisodeCard__closeDialog\" onClick={(e)=>{this.closeDialog(e, index)}}>\r\n                                            x\r\n                                        </button>\r\n                                    </div>\r\n                                    <div \r\n                                        dangerouslySetInnerHTML={{__html: episode.description}}\r\n                                        className=\"EpisodeCard__description\"\r\n                                    />\r\n                                </dialog>\r\n                                <div className=\"EpisodeCard__options\">\r\n                                    <div className=\"EpisodeCard__options--container\">\r\n                                        <button className=\"EpisodeCard__options--listen\">\r\n                                            <i class=\"fas fa-headphones-alt\"></i> Listen\r\n                                        </button>\r\n                                        <p className=\"EpisodeCard__options--audioLength\">     \r\n                                            {this.totalTime(episode.audio_length_sec)}\r\n                                        </p>\r\n                                    </div>\r\n                                    <button \r\n                                        className=\"EpisodeCard__options--details\"\r\n                                        onClick={(e)=>{this.showDetails(e, index)}}>\r\n                                        Details\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </section>\r\n            </div>\r\n        </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Podcast","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n// import logo from \"./styles/assets/logo.png\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Footer extends Component {\r\n\r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div className=\"Footer\">\r\n        <div className=\"wrapper\">\r\n            <p className=\"Footer__copy\">\r\n              Paths and Podcasts | Copyright 2019 | Russell Bentulan, Alissa Cheng,\r\n              Corey Derouin and James Lewis\r\n            </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// EXPORT ========================================\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport Header from './Header'\r\nimport MapQuestSearch from './MapQuestSearch';\r\nimport Podcast from \"./Podcast\";\r\nimport Footer from \"./Footer\";\r\n\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './styles/App.scss';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      mapQuestApiKey: \"uMDO6BJLrXNNrJI5BZ7A0tFS6AojdBjn\",\r\n      startAndEndLocations: {},\r\n      bikingTime: \"\",\r\n      walkingTime: \"\",\r\n      podcastTime: \"\",\r\n      podcastEpisode: {},\r\n    };\r\n  };\r\n\r\n  setBikeTime = (returnedBikingTime) => {\r\n    this.setState({\r\n      bikingTime: returnedBikingTime,\r\n    })\r\n  }\r\n\r\n  setWalkTime = (returnedWalkingTime) => {\r\n    this.setState({\r\n      walkingTime: returnedWalkingTime,\r\n    });\r\n  }\r\n\r\n  setLocations = (locationObject) => {\r\n    this.setState({\r\n      startAndEndLocations: locationObject,\r\n    })\r\n  }\r\n\r\n  setPodcastTime = (returnedPodcastTime) => {\r\n    this.setState({\r\n      podcastTime: returnedPodcastTime,\r\n    })\r\n  }\r\n\r\n  selectedEpisode = (podcastEpisode) => {\r\n    this.setState({\r\n      podcastEpisode: podcastEpisode,\r\n    })\r\n  }\r\n\r\n  render(){\r\n    console.log(this.state)\r\n    return (\r\n      <Router>\r\n        <Route path=\"/\" component={Header} />\r\n\r\n        <MapQuestSearch\r\n          setLocationsProp={this.setLocations}\r\n          setBikeTimeProp={this.setBikeTime}\r\n          setWalkTimeProp={this.setWalkTime}\r\n          apiKey={this.state.mapQuestApiKey}\r\n          stateProp={this.state}\r\n        />\r\n\r\n        \r\n        <Podcast\r\n          setPodcastTime={this.setPodcastTime}\r\n          selectedEpisodeProp={this.selectedEpisode}\r\n        />\r\n\r\n        <Route path=\"/\" component={Footer}/>\r\n      </Router>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}